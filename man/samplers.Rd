% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/samplers.R
\name{samplers}
\alias{samplers}
\alias{hmc}
\alias{random_walk_metropolis_hastings}
\title{MCMC samplers}
\usage{
hmc(Lmin = 5, Lmax = 10, epsilon = 0.1, diag_sd = 1)

random_walk_metropolis_hastings(proposal_function = c("normal", "uniform"))
}
\arguments{
\item{Lmin}{minimum number of leapfrog steps (positive integer, Lmin > Lmax)}

\item{Lmax}{maximum number of leapfrog steps (positive integer, Lmax > Lmin)}

\item{epsilon}{leapfrog stepsize hyperparameter (positive, will be tuned)}

\item{diag_sd}{estimate of the posterior marginal standard deviations
(positive, will be tuned).}
}
\value{
a \code{sampler} object that can be passed to \code{\link{mcmc}}.
}
\description{
Functions to set up MCMC samplers and change the startng values
  of their parameters, for use in \code{\link{mcmc}()}.
}
\details{
During the warmup iterations of \code{mcmc}, some of these
  sampler parameters will be tuned to improve the efficiency of the sampler,
  so the values provided here are used as starting values.

For \code{hmc()}, the number of leapfrog steps at each iteration is
  selected uniformly at random from between \code{Lmin} and \code{Lmax}.
  \code{diag_sd} is used to rescale the parameter space to make it more
  uniform, and make sampling more efficient.

The Random Walk Metropolis Hastings algorithm is a gradient free
sampling algorithm that requires no tuning parameters. The algorithm involves
a proposal generating step `proposal_state = current_state + perturb` by a
random perturbation, followed by Metropolis-Hastings accept/reject step. The
class is implemented for uniform and normal proposals.
}
